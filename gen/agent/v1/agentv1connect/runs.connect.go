// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: agent/v1/runs.proto

package agentv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/chushi-io/agent/gen/agent/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RunsName is the fully-qualified name of the Runs service.
	RunsName = "agent.v1.Runs"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RunsUpdateStatusProcedure is the fully-qualified name of the Runs's UpdateStatus RPC.
	RunsUpdateStatusProcedure = "/agent.v1.Runs/UpdateStatus"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	runsServiceDescriptor            = v1.File_agent_v1_runs_proto.Services().ByName("Runs")
	runsUpdateStatusMethodDescriptor = runsServiceDescriptor.Methods().ByName("UpdateStatus")
)

// RunsClient is a client for the agent.v1.Runs service.
type RunsClient interface {
	UpdateStatus(context.Context, *connect.Request[v1.UpdateRunStatusRequest]) (*connect.Response[v1.Run], error)
}

// NewRunsClient constructs a client for the agent.v1.Runs service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRunsClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RunsClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &runsClient{
		updateStatus: connect.NewClient[v1.UpdateRunStatusRequest, v1.Run](
			httpClient,
			baseURL+RunsUpdateStatusProcedure,
			connect.WithSchema(runsUpdateStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// runsClient implements RunsClient.
type runsClient struct {
	updateStatus *connect.Client[v1.UpdateRunStatusRequest, v1.Run]
}

// UpdateStatus calls agent.v1.Runs.UpdateStatus.
func (c *runsClient) UpdateStatus(ctx context.Context, req *connect.Request[v1.UpdateRunStatusRequest]) (*connect.Response[v1.Run], error) {
	return c.updateStatus.CallUnary(ctx, req)
}

// RunsHandler is an implementation of the agent.v1.Runs service.
type RunsHandler interface {
	UpdateStatus(context.Context, *connect.Request[v1.UpdateRunStatusRequest]) (*connect.Response[v1.Run], error)
}

// NewRunsHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRunsHandler(svc RunsHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	runsUpdateStatusHandler := connect.NewUnaryHandler(
		RunsUpdateStatusProcedure,
		svc.UpdateStatus,
		connect.WithSchema(runsUpdateStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/agent.v1.Runs/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RunsUpdateStatusProcedure:
			runsUpdateStatusHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRunsHandler returns CodeUnimplemented from all methods.
type UnimplementedRunsHandler struct{}

func (UnimplementedRunsHandler) UpdateStatus(context.Context, *connect.Request[v1.UpdateRunStatusRequest]) (*connect.Response[v1.Run], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("agent.v1.Runs.UpdateStatus is not implemented"))
}
